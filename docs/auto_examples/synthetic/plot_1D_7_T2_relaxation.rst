
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/synthetic/plot_1D_7_T2_relaxation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_synthetic_plot_1D_7_T2_relaxation.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_synthetic_plot_1D_7_T2_relaxation.py:


Broad T2 distribution (Inverse Laplace)
=======================================

.. GENERATED FROM PYTHON SOURCE LINES 8-15

The following example demonstrates the statistical learning based determination of
the NMR T2 relaxation vis inverse Laplace transformation.

Before getting started
----------------------

Import all relevant packages.

.. GENERATED FROM PYTHON SOURCE LINES 15-23

.. code-block:: default

    import csdmpy as cp
    import matplotlib.pyplot as plt
    import numpy as np

    from mrinversion.kernel import relaxation
    from mrinversion.linear_model import LassoFistaCV, TSVDCompression









.. GENERATED FROM PYTHON SOURCE LINES 25-29

Dataset setup
-------------
Load the dataset
''''''''''''''''

.. GENERATED FROM PYTHON SOURCE LINES 29-34

.. code-block:: default

    domain = "https://sandbox.zenodo.org/record/1065394/files"
    filename = f"{domain}/test3_signal.csdf"
    signal = cp.load(filename)
    sigma = 0.0008








.. GENERATED FROM PYTHON SOURCE LINES 35-38

The variable ``signal`` holds the 1D dataset. For comparison, let's
also import the true t2 distribution from which the synthetic 1D signal
decay is simulated.

.. GENERATED FROM PYTHON SOURCE LINES 38-46

.. code-block:: default

    datafile = f"{domain}/test3_t2.csdf"
    true_t2_dist = cp.load(datafile)

    plt.figure(figsize=(4.5, 3.5))
    signal.plot()
    plt.tight_layout()
    plt.show()




.. image-sg:: /auto_examples/synthetic/images/sphx_glr_plot_1D_7_T2_relaxation_001.png
   :alt: plot 1D 7 T2 relaxation
   :srcset: /auto_examples/synthetic/images/sphx_glr_plot_1D_7_T2_relaxation_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 47-51

Linear Inversion setup
----------------------
Generating the kernel
'''''''''''''''''''''

.. GENERATED FROM PYTHON SOURCE LINES 51-62

.. code-block:: default

    kernel_dimension = signal.dimensions[0]

    relaxT2 = relaxation.T2(
        kernel_dimension=kernel_dimension,
        inverse_dimension=dict(
            count=64, minimum="1e-2 s", maximum="1e3 s", scale="log", label="log (T2 / s)"
        ),
    )
    inverse_dimension = relaxT2.inverse_dimension
    K = relaxT2.kernel(supersampling=20)








.. GENERATED FROM PYTHON SOURCE LINES 63-65

Data Compression
''''''''''''''''

.. GENERATED FROM PYTHON SOURCE LINES 65-71

.. code-block:: default

    new_system = TSVDCompression(K, signal)
    compressed_K = new_system.compressed_K
    compressed_s = new_system.compressed_s

    print(f"truncation_index = {new_system.truncation_index}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    compression factor = 1.0416666666666667
    truncation_index = 24




.. GENERATED FROM PYTHON SOURCE LINES 72-75

Fista LASSO cross-validation
'''''''''''''''''''''''''''''
Create a guess range of values for the :math:`\lambda` hyperparameters.

.. GENERATED FROM PYTHON SOURCE LINES 75-88

.. code-block:: default

    lambdas = 10 ** (-7 + 6 * (np.arange(64) / 63))

    # setup the smooth lasso cross-validation class
    f_lasso_cv = LassoFistaCV(
        lambdas=lambdas,  # A numpy array of lambda values.
        folds=5,  # The number of folds in n-folds cross-validation.
        sigma=sigma,  # noise standard deviation
        inverse_dimension=inverse_dimension,  # previously defined inverse dimensions.
    )

    # run the fit method on the compressed kernel and compressed data.
    f_lasso_cv.fit(K=compressed_K, s=compressed_s)








.. GENERATED FROM PYTHON SOURCE LINES 89-91

The optimum hyper-parameters
''''''''''''''''''''''''''''

.. GENERATED FROM PYTHON SOURCE LINES 91-93

.. code-block:: default

    print(f_lasso_cv.hyperparameters)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'lambda': 0.0001115883992507748}




.. GENERATED FROM PYTHON SOURCE LINES 94-96

The cross-validation curve
''''''''''''''''''''''''''

.. GENERATED FROM PYTHON SOURCE LINES 96-101

.. code-block:: default

    plt.figure(figsize=(4.5, 3.5))
    f_lasso_cv.cv_plot()
    plt.tight_layout()
    plt.show()




.. image-sg:: /auto_examples/synthetic/images/sphx_glr_plot_1D_7_T2_relaxation_002.png
   :alt: plot 1D 7 T2 relaxation
   :srcset: /auto_examples/synthetic/images/sphx_glr_plot_1D_7_T2_relaxation_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 102-104

The optimum solution
''''''''''''''''''''

.. GENERATED FROM PYTHON SOURCE LINES 104-115

.. code-block:: default

    sol = f_lasso_cv.f

    plt.figure(figsize=(4, 3))
    plt.subplot(projection="csdm")
    plt.plot(true_t2_dist / true_t2_dist.max(), label="true")
    plt.plot(sol / sol.max(), label="opt solution")
    plt.legend()
    plt.grid()
    plt.tight_layout()
    plt.show()




.. image-sg:: /auto_examples/synthetic/images/sphx_glr_plot_1D_7_T2_relaxation_003.png
   :alt: plot 1D 7 T2 relaxation
   :srcset: /auto_examples/synthetic/images/sphx_glr_plot_1D_7_T2_relaxation_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 116-118

Residuals
'''''''''

.. GENERATED FROM PYTHON SOURCE LINES 118-125

.. code-block:: default

    residuals = f_lasso_cv.residuals(K=K, s=signal)
    print(residuals.std())

    plt.figure(figsize=(4.5, 3.5))
    residuals.plot()
    plt.tight_layout()
    plt.show()



.. image-sg:: /auto_examples/synthetic/images/sphx_glr_plot_1D_7_T2_relaxation_004.png
   :alt: plot 1D 7 T2 relaxation
   :srcset: /auto_examples/synthetic/images/sphx_glr_plot_1D_7_T2_relaxation_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    0.000588706676280229





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.208 seconds)


.. _sphx_glr_download_auto_examples_synthetic_plot_1D_7_T2_relaxation.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/DeepanshS/mrinversion/master?urlpath=lab/tree/docs/_build/html/../../notebooks/auto_examples/synthetic/plot_1D_7_T2_relaxation.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_1D_7_T2_relaxation.py <plot_1D_7_T2_relaxation.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_1D_7_T2_relaxation.ipynb <plot_1D_7_T2_relaxation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
