
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/MAF/plot_2d_4_MgO.SiO2.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_MAF_plot_2d_4_MgO.SiO2.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_MAF_plot_2d_4_MgO.SiO2.py:


2D MAF data of MgO.SiO2 glass
=============================

.. GENERATED FROM PYTHON SOURCE LINES 8-17

The following example illustrates an application of the statistical learning method
applied in determining the distribution of the nuclear shielding tensor parameters
from a 2D magic-angle flipping (MAF) spectrum. In this example, we use the 2D MAF
spectrum [#f1]_ of :math:`\text{MgO}\cdot\text{SiO}_2` glass.

Before getting started
----------------------

Import all relevant packages.

.. GENERATED FROM PYTHON SOURCE LINES 17-26

.. code-block:: default

    import csdmpy as cp
    import matplotlib.pyplot as plt
    import numpy as np

    from mrinversion.kernel.nmr import ShieldingPALineshape
    from mrinversion.linear_model import SmoothLasso, TSVDCompression
    from mrinversion.utils import plot_3d, to_Haeberlen_grid









.. GENERATED FROM PYTHON SOURCE LINES 28-29

Setup for the matplotlib figures.

.. GENERATED FROM PYTHON SOURCE LINES 29-42

.. code-block:: default



    # function for plotting 2D dataset
    def plot2D(csdm_object, **kwargs):
        plt.figure(figsize=(4.5, 3.5))
        ax = plt.subplot(projection="csdm")
        ax.imshow(csdm_object, cmap="gist_ncar_r", aspect="auto", **kwargs)
        ax.invert_xaxis()
        ax.invert_yaxis()
        plt.tight_layout()
        plt.show()









.. GENERATED FROM PYTHON SOURCE LINES 43-50

Dataset setup
-------------

Import the dataset
''''''''''''''''''

Load the dataset. Here, we import the dataset as the CSDM data-object.

.. GENERATED FROM PYTHON SOURCE LINES 50-61

.. code-block:: default


    # The 2D MAF dataset in csdm format
    filename = "https://zenodo.org/record/3964531/files/MgO-SiO2-MAF.csdf"
    data_object = cp.load(filename)

    # For inversion, we only interest ourselves with the real part of the complex dataset.
    data_object = data_object.real

    # We will also convert the coordinates of both dimensions from Hz to ppm.
    _ = [item.to("ppm", "nmr_frequency_ratio") for item in data_object.dimensions]








.. GENERATED FROM PYTHON SOURCE LINES 62-66

Here, the variable ``data_object`` is a
`CSDM <https://csdmpy.readthedocs.io/en/latest/api/CSDM.html>`_
object that holds the real part of the 2D MAF dataset. The plot of the 2D MAF dataset
is

.. GENERATED FROM PYTHON SOURCE LINES 66-68

.. code-block:: default

    plot2D(data_object)




.. image-sg:: /auto_examples/MAF/images/sphx_glr_plot_2d_4_MgO.SiO2_001.png
   :alt: plot 2d 4 MgO.SiO2
   :srcset: /auto_examples/MAF/images/sphx_glr_plot_2d_4_MgO.SiO2_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-89

There are two dimensions in this dataset. The dimension at index 0 is the pure
anisotropic dimension, while the dimension at index 1 is the isotropic chemical shift
dimension.

Prepping the data for inversion
'''''''''''''''''''''''''''''''
**Step-1: Data Alignment**

When using the csdm objects with the ``mrinversion`` package, the dimension at index
0 must be the dimension undergoing the linear inversion. In this example, we plan to
invert the pure anisotropic shielding line-shape. In the ``data_object``, the
anisotropic dimension is already at index 0 and, therefore, no further action is
required.

**Step-2: Optimization**

Also notice, the signal from the 2D MAF dataset occupies a small fraction of the
two-dimensional frequency grid. For optimum performance, truncate the dataset to the
relevant region before proceeding. Use the appropriate array indexing/slicing to
select the signal region.

.. GENERATED FROM PYTHON SOURCE LINES 89-92

.. code-block:: default

    data_object_truncated = data_object[:, 37:74]
    plot2D(data_object_truncated)




.. image-sg:: /auto_examples/MAF/images/sphx_glr_plot_2d_4_MgO.SiO2_002.png
   :alt: plot 2d 4 MgO.SiO2
   :srcset: /auto_examples/MAF/images/sphx_glr_plot_2d_4_MgO.SiO2_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 93-103

Linear Inversion setup
----------------------

Dimension setup
'''''''''''''''

**Anisotropic-dimension:**
The dimension of the dataset that holds the pure anisotropic frequency
contributions. In ``mrinversion``, this must always be the dimension at index 0 of
the data object.

.. GENERATED FROM PYTHON SOURCE LINES 103-105

.. code-block:: default

    anisotropic_dimension = data_object_truncated.dimensions[0]








.. GENERATED FROM PYTHON SOURCE LINES 106-108

**x-y dimensions:**
The two inverse dimensions corresponding to the `x` and `y`-axis of the `x`-`y` grid.

.. GENERATED FROM PYTHON SOURCE LINES 108-113

.. code-block:: default

    inverse_dimensions = [
        cp.LinearDimension(count=28, increment="400 Hz", label="x"),  # the `x`-dimension.
        cp.LinearDimension(count=28, increment="400 Hz", label="y"),  # the `y`-dimension.
    ]








.. GENERATED FROM PYTHON SOURCE LINES 114-121

Generating the kernel
'''''''''''''''''''''

For MAF datasets, the line-shape kernel corresponds to the pure nuclear shielding
anisotropy line-shapes. Use the
:class:`~mrinversion.kernel.nmr.ShieldingPALineshape` class to generate
a shielding line-shape kernel.

.. GENERATED FROM PYTHON SOURCE LINES 121-131

.. code-block:: default

    lineshape = ShieldingPALineshape(
        anisotropic_dimension=anisotropic_dimension,
        inverse_dimension=inverse_dimensions,
        channel="29Si",
        magnetic_flux_density="9.4 T",
        rotor_angle="90°",
        rotor_frequency="12 kHz",
        number_of_sidebands=4,
    )








.. GENERATED FROM PYTHON SOURCE LINES 132-148

Here, ``lineshape`` is an instance of the
:class:`~mrinversion.kernel.nmr.ShieldingPALineshape` class. The required
arguments of this class are the `anisotropic_dimension`, `inverse_dimension`, and
`channel`. We have already defined the first two arguments in the previous
sub-section. The value of the `channel` argument is the nucleus observed in the MAF
experiment. In this example, this value is '29Si'.
The remaining arguments, such as the `magnetic_flux_density`, `rotor_angle`,
and `rotor_frequency`, are set to match the conditions under which the 2D MAF
spectrum was acquired. The value of the
`number_of_sidebands` argument is the number of sidebands calculated for each
line-shape within the kernel. Unless, you have a lot of spinning sidebands in your
MAF dataset, four sidebands should be enough.

Once the ShieldingPALineshape instance is created, use the
:meth:`~mrinversion.kernel.nmr.ShieldingPALineshape.kernel` method of the
instance to generate the MAF line-shape kernel.

.. GENERATED FROM PYTHON SOURCE LINES 148-151

.. code-block:: default

    K = lineshape.kernel(supersampling=1)
    print(K.shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (64, 784)




.. GENERATED FROM PYTHON SOURCE LINES 152-155

The kernel ``K`` is a NumPy array of shape (32, 784), where the axes with 32 and
784 points are the anisotropic dimension and the features (x-y coordinates)
corresponding to the :math:`28\times 28` `x`-`y` grid, respectively.

.. GENERATED FROM PYTHON SOURCE LINES 157-162

Data Compression
''''''''''''''''

Data compression is optional but recommended. It may reduce the size of the
inverse problem and, thus, further computation time.

.. GENERATED FROM PYTHON SOURCE LINES 162-168

.. code-block:: default

    new_system = TSVDCompression(K, data_object_truncated)
    compressed_K = new_system.compressed_K
    compressed_s = new_system.compressed_s

    print(f"truncation_index = {new_system.truncation_index}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    compression factor = 1.032258064516129
    truncation_index = 62




.. GENERATED FROM PYTHON SOURCE LINES 169-182

Solving the inverse problem
---------------------------

Smooth LASSO cross-validation
'''''''''''''''''''''''''''''

Solve the smooth-lasso problem. Ordinarily, one should use the statistical learning
method to solve the inverse problem over a range of α and λ values and then determine
the best nuclear shielding tensor parameter distribution for the given 2D MAF
dataset. Considering the limited build time for the documentation, we skip this step
and evaluate the distribution at pre-optimized α and λ values. The optimum values are
:math:`\alpha = 1.2\times 10^{-4}` and :math:`\lambda = 4.55\times 10^{-6}`.
The following commented code was used in determining the optimum α and λ values.

.. GENERATED FROM PYTHON SOURCE LINES 184-215

.. code-block:: default


    # from mrinversion.linear_model import SmoothLassoCV
    # import numpy as np

    # # setup the pre-defined range of alpha and lambda values
    # lambdas = 10 ** (-4.5 - 1 * (np.arange(20) / 19))
    # alphas = 10 ** (-2.5 - 3 * (np.arange(20) / 19))

    # # setup the smooth lasso cross-validation class
    # s_lasso = SmoothLassoCV(
    #     alphas=alphas,  # A numpy array of alpha values.
    #     lambdas=lambdas,  # A numpy array of lambda values.
    #     sigma=0.016,  # The standard deviation of noise from the MAF data.
    #     folds=10,  # The number of folds in n-folds cross-validation.
    #     inverse_dimension=inverse_dimensions,  # previously defined inverse dimensions.
    #     verbose=1,  # If non-zero, prints the progress as the computation proceeds.
    # )

    # # run fit using the compressed kernel and compressed data.
    # s_lasso.fit(compressed_K, compressed_s)

    # # the optimum hyper-parameters, alpha and lambda, from the cross-validation.
    # print(s_lasso.hyperparameters)
    # # {'alpha': 3.359818286283781e-05, 'lambda': 5.324953129837531e-06}

    # # the solution
    # f_sol = s_lasso.f

    # # the cross-validation error curve
    # CV_metric = s_lasso.cross_validation_curve








.. GENERATED FROM PYTHON SOURCE LINES 216-217

If you use the above ``SmoothLassoCV`` method, skip the following code-block.

.. GENERATED FROM PYTHON SOURCE LINES 217-224

.. code-block:: default


    s_lasso = SmoothLasso(
        alpha=1.2e-4, lambda1=4.55e-6, inverse_dimension=inverse_dimensions
    )
    # run the fit method on the compressed kernel and compressed data.
    s_lasso.fit(K=compressed_K, s=compressed_s)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /Users/philip/GitHub/mrinversion/mrinversion/linear_model/_base_l1l2.py:183: RuntimeWarning: divide by zero encountered in log10
      coords = np.log10(dim.coordinates.value)




.. GENERATED FROM PYTHON SOURCE LINES 225-230

The optimum solution
''''''''''''''''''''

The :attr:`~mrinversion.linear_model.SmoothLasso.f` attribute of the instance holds
the solution,

.. GENERATED FROM PYTHON SOURCE LINES 230-232

.. code-block:: default

    f_sol = s_lasso.f  # f_sol is a CSDM object.








.. GENERATED FROM PYTHON SOURCE LINES 233-240

where ``f_sol`` is the optimum solution.

The fit residuals
'''''''''''''''''

To calculate the residuals between the data and predicted data(fit), use the
:meth:`~mrinversion.linear_model.SmoothLasso.residuals` method, as follows,

.. GENERATED FROM PYTHON SOURCE LINES 240-246

.. code-block:: default

    residuals = s_lasso.residuals(K, data_object_truncated)
    # residuals is a CSDM object.

    # The plot of the residuals.
    plot2D(residuals, vmax=data_object_truncated.max(), vmin=data_object_truncated.min())




.. image-sg:: /auto_examples/MAF/images/sphx_glr_plot_2d_4_MgO.SiO2_003.png
   :alt: plot 2d 4 MgO.SiO2
   :srcset: /auto_examples/MAF/images/sphx_glr_plot_2d_4_MgO.SiO2_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 247-248

The standard deviation of the residuals is

.. GENERATED FROM PYTHON SOURCE LINES 248-250

.. code-block:: default

    residuals.std()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <Quantity 0.01375912>



.. GENERATED FROM PYTHON SOURCE LINES 251-256

Saving the solution
'''''''''''''''''''

To serialize the solution to a file, use the `save()` method of the CSDM object,
for example,

.. GENERATED FROM PYTHON SOURCE LINES 256-259

.. code-block:: default

    f_sol.save("MgO.SiO2_inverse.csdf")  # save the solution
    residuals.save("MgO.SiO2_residue.csdf")  # save the residuals








.. GENERATED FROM PYTHON SOURCE LINES 260-271

Data Visualization
------------------

At this point, we have solved the inverse problem and obtained an optimum
distribution of the nuclear shielding tensor parameters from the 2D MAF dataset. You
may use any data visualization and interpretation tool of choice for further
analysis. In the following sections, we provide minimal visualization to complete the
case study.

Visualizing the 3D solution
'''''''''''''''''''''''''''

.. GENERATED FROM PYTHON SOURCE LINES 271-285

.. code-block:: default


    # Normalize the solution
    f_sol /= f_sol.max()

    # Convert the coordinates of the solution, `f_sol`, from Hz to ppm.
    [item.to("ppm", "nmr_frequency_ratio") for item in f_sol.dimensions]

    # The 3D plot of the solution
    plt.figure(figsize=(5, 4.4))
    ax = plt.subplot(projection="3d")
    plot_3d(ax, f_sol, x_lim=[0, 140], y_lim=[0, 140], z_lim=[-50, -120], alpha=0.05)
    plt.tight_layout()
    plt.show()




.. image-sg:: /auto_examples/MAF/images/sphx_glr_plot_2d_4_MgO.SiO2_004.png
   :alt: plot 2d 4 MgO.SiO2
   :srcset: /auto_examples/MAF/images/sphx_glr_plot_2d_4_MgO.SiO2_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 286-291

Convert the 3D tensor distribution in Haeberlen parameters
----------------------------------------------------------
You may re-bin the 3D tensor parameter distribution from a
:math:`\rho(\delta_\text{iso}, x, y)` distribution to
:math:`\rho(\delta_\text{iso}, \zeta_\sigma, \eta_\sigma)` distribution as follows.

.. GENERATED FROM PYTHON SOURCE LINES 291-299

.. code-block:: default


    # Create the zeta and eta dimensions,, as shown below.
    zeta = cp.as_dimension(np.arange(40) * 8 - 150, unit="ppm", label="zeta")
    eta = cp.as_dimension(np.arange(16) / 15, label="eta")

    # Use the `to_Haeberlen_grid` function to convert the tensor parameter distribution.
    fsol_Hae = to_Haeberlen_grid(f_sol, zeta, eta)








.. GENERATED FROM PYTHON SOURCE LINES 300-302

The 3D plot
'''''''''''

.. GENERATED FROM PYTHON SOURCE LINES 302-308

.. code-block:: default

    plt.figure(figsize=(5, 4.4))
    ax = plt.subplot(projection="3d")
    plot_3d(ax, fsol_Hae, x_lim=[0, 1], y_lim=[-150, 150], z_lim=[-50, -120], alpha=0.05)
    plt.tight_layout()
    plt.show()




.. image-sg:: /auto_examples/MAF/images/sphx_glr_plot_2d_4_MgO.SiO2_005.png
   :alt: plot 2d 4 MgO.SiO2
   :srcset: /auto_examples/MAF/images/sphx_glr_plot_2d_4_MgO.SiO2_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 309-317

References
----------

.. [#f1] Davis, M., Sanders, K. J., Grandinetti, P. J., Gaudio, S. J., Sen, S.,
      Structural investigations of magnesium silicate glasses by 29Si magic-angle
      flipping NMR, J. Non. Cryst. Solids, **357**, 2787–2795, (2011).
      `doi:10.1016/j.jnoncrysol.2011.02.045.
      <https://doi.org/doi:10.1016/j.jnoncrysol.2011.02.045>`_


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.134 seconds)


.. _sphx_glr_download_auto_examples_MAF_plot_2d_4_MgO.SiO2.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/DeepanshS/mrinversion/master?urlpath=lab/tree/docs/_build/html/../../notebooks/auto_examples/MAF/plot_2d_4_MgO.SiO2.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_2d_4_MgO.SiO2.py <plot_2d_4_MgO.SiO2.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_2d_4_MgO.SiO2.ipynb <plot_2d_4_MgO.SiO2.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
